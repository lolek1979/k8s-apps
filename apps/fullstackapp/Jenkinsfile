#!/usr/bin/env groovy

properties([
    parameters([
        string(name: 'imageTag', defaultValue: '1.0.0', description: 'Image tag to build and push'),
        choice(name: 'buildComponent', choices: ['all', 'frontend', 'backend'], description: 'Which component to build'),
    ])
])

def imageTag = params.imageTag
def buildComponent = params.buildComponent

def images = [
    [name: "frontend", image: "pkonieczny321/fullstackapp-frontend"],
    [name: "backend", image: "pkonieczny321/fullstackapp-backend"]
]

node('docker-agent') {
    stage('Checkout Repos') {
        echo "Checking out apps and k8s repos..."
        parallel(
            app: {
                dir('app') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/lolek1979/fullstackapp.git',
                            credentialsId: 'github-creds'
                        ]]
                    ])
                }
            },
            k8s: {
                dir('k8s') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/lolek1979/k8s-apps.git',
                            credentialsId: 'github-creds'
                        ]]
                    ])
                }
            }
        )
    }

    images.each { img ->
        if (buildComponent != "all" && buildComponent != img.name) {
            echo "⏩ Skipping ${img.name} because it's not selected"
            return
        }

        def shouldBuild = true

        stage("Check ${img.name} Tag") {
            echo "🔍 Checking if ${img.image}:${imageTag} exists on Docker Hub..."
            def status = sh(
                script: """
                    curl --silent --fail https://hub.docker.com/v2/repositories/${img.image.replaceAll('/', '%2F')}/tags/${imageTag}/ > /dev/null
                """,
                returnStatus: true
            )
            if (status == 0) {
                echo "✅ Image ${img.image}:${imageTag} exists. Skipping build."
                shouldBuild = false
            } else {
                echo "🚧 Tag not found. Will build and push ${img.image}:${imageTag}"
            }
        }

        if (shouldBuild) {
            stage("Build ${img.name}") {
                dir("app/${img.name}") {
                    sh "docker build -t ${img.image}:${imageTag} ."
                }
            }

            stage("Push ${img.name}") {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh '''
                        echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                    '''
                }
                sh "docker push ${img.image}:${imageTag}"
            }
        }
    }

    stage('Deploy Argo CD Application') {
        dir('k8s') {
            sh 'kubectl apply -f argocd/fullstackapp/fullstackapp-argocd.yaml -n argocd'
        }
    }

    stage('Post Deployment') {
        echo "🚀 Deployment triggered. Check Argo CD for fullstackapp sync status."
    }
}